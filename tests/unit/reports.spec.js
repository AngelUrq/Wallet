import { expect } from 'chai'
import { shallowMount } from '@vue/test-utils'
import Reports from '@/components/reports/Reports.vue'

describe('Reports.vue', () => {
  let wrapper

  beforeEach(function() {
    wrapper = shallowMount(Reports, {
      mocks: {
        $store: {
          state: {
            actualAccount: { name: 'Test account', income: [], expenses: [] },
          },
        },
      },
    })
  })

  it('displays error message when start date is greater than end date', () => {
    const startDate = wrapper.find('#startDate')
    startDate.setValue('05/03/2018')

    const endDate = wrapper.find('#endDate')
    endDate.setValue('05/02/2018')

    const showReport = wrapper.find('#showReport')
    showReport.trigger('click')

    expect(wrapper.find('#dateError').exists()).to.equal(true)
  })

  it('displays error message when start date is empty', () => {
    const endDate = wrapper.find('#endDate')
    endDate.setValue('20/03/2018')

    const showReport = wrapper.find('#showReport')
    showReport.trigger('click')

    expect(wrapper.find('#dateError').exists()).to.equal(true)
  })

  it('does not show date inputs when report is generated by category', () => {
    const reportType = wrapper.find('#reportType')
    reportType.setValue('category')

    expect(wrapper.find('#startDate').exists()).to.equal(false)
    expect(wrapper.find('#endDate').exists()).to.equal(false)
  })

  it('does not show table when report type is changed', () => {
    const reportType = wrapper.find('#reportType')
    reportType.setValue('category')

    const showReport = wrapper.find('#showReport')
    showReport.trigger('click')

    reportType.trigger('change')

    expect(wrapper.find('#reportTable').exists()).to.equal(false)
  })

  it('shows actual account name', () => {
    const reportType = wrapper.find('#reportType')
    reportType.setValue('category')

    const showReport = wrapper.find('#showReport')
    showReport.trigger('click')

    reportType.trigger('change')

    expect(wrapper.find('#tableReport').exists()).to.equal(false)
  })
})
